Description: >
    Daniel Quaidoo / Deploy High Availability Project

Parameters:

    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

    AMItoUse:
      Description: AMI to use for our base image
      Type: String
    
    AMItoUseInstanceType:
      Description: AMI InstanceType to use for our base image
      Type: String

    BastianIPAddress:
      Description: IP Address to give access to Bastian Host
      Type: String

Resources:
    # BastianHost only for development
    # BastianHost:
    #     Type: AWS::EC2::Instance
    #     Properties:
    #       InstanceType: !Ref AMItoUseInstanceType
    #       ImageId: !Ref AMItoUse
    #       KeyName: jumpbox-keypair
    #       NetworkInterfaces:
    #         - AssociatePublicIpAddress: "true"
    #           DeviceIndex: "0"
    #           GroupSet:
    #             - Ref: "BastianHostSecurityGroup"
    #           SubnetId:
    #             Fn::ImportValue: 
    #               !Sub "${EnvironmentName}-PUB1-SN"
    #       UserData:
    #         Fn::Base64: !Sub |
    #           #!/bin/bash
    #           yum update -y
    #           yum install -y httpd
    #           systemctl start httpd
    #       Tags: 
    #             - Key: Name 
    #               Value: !Sub ${EnvironmentName} JumpBox

    # BastianHostSecurityGroup:
    #     Type: AWS::EC2::SecurityGroup
    #     Properties:
    #         GroupDescription: Allow http to our test host
    #         VpcId:
    #           Fn::ImportValue:
    #             !Sub "${EnvironmentName}-VPCID"
    #         SecurityGroupIngress:
    #         - IpProtocol: tcp
    #           FromPort: 22
    #           ToPort: 22
    #           CidrIp: !Ref BastianIPAddress
    #         SecurityGroupEgress:
    #         - IpProtocol: -1
    #           FromPort: -1
    #           ToPort: -1
    #           CidrIp: 0.0.0.0/0
    
    RoleForSSMAccess: 
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

    ServerInstanceProfile: 
      Type: "AWS::IAM::InstanceProfile"
      Properties:
        Path: / 
        Roles: 
          - !Ref RoleForSSMAccess

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our load balancer
          VpcId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-VPCID"
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 22
        #   ToPort: 22
        #   CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

    WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service          
            cd /var/www/html
            echo "Dummy Page" > index.html 
        ImageId: !Ref AMItoUse
        KeyName: omicronkeypair
        SecurityGroups:
        - Ref: WebServerSecGroup
        InstanceType: !Ref AMItoUseInstanceType
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

    WebAppGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:
        - Fn::ImportValue: 
            !Sub "${EnvironmentName}-PRIV-NETS"
        LaunchConfigurationName:
          Ref: WebAppLaunchConfig
        MinSize: '4'
        MaxSize: '8'
        TargetGroupARNs:
        - Ref: WebAppTargetGroup

    WebAppLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
        SecurityGroups:
        - Ref: LBSecGroup

    Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
        LoadBalancerArn:
          Ref: WebAppLB
        Port: '8080'
        Protocol: HTTP

    ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        TargetType: instance
        HealthCheckIntervalSeconds: 30
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 8080
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: 
          Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:

    LoadBalancer:
      Description: The Application Load Balancer
      Value: !Ref WebAppLB
      Export:
          Name: !Sub ${EnvironmentName}-WebAppLB

    LoadBalancerUrl:
      Description: The URL of the Web Application Load Balancer
      Value: !Join [ "", [ "http://", !GetAtt WebAppLB.DNSName ] ]
      Export:
          Name: !Sub ${EnvironmentName}-WebAppURL

    LBSecGroup:
      Description: The Web Application Load Balancer Security Group
      Value: !Ref LBSecGroup
      Export:
          Name: !Sub ${EnvironmentName}-LBSecGroup

    WebServerSecGroup:
      Description: The Web Server Security Group
      Value: !Ref WebServerSecGroup
      Export:
          Name: !Sub ${EnvironmentName}-WebServerSecGroup